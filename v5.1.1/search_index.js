var documenterSearchIndex = {"docs":
[{"location":"apis/","page":"API documentation","title":"API documentation","text":"CurrentModule = CitableBase","category":"page"},{"location":"apis/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"apis/#URNs","page":"API documentation","title":"URNs","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Urn","category":"page"},{"location":"apis/#CitableBase.Urn","page":"API documentation","title":"CitableBase.Urn","text":"Unique identifiers expressible in the syntax of the IETF's URN specification.\n\n\n\n\n\n","category":"type"},{"location":"apis/#Concrete-functions-for-Urns","page":"API documentation","title":"Concrete functions for Urns","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"components\nparts","category":"page"},{"location":"apis/#CitableBase.components","page":"API documentation","title":"CitableBase.components","text":"components(uString)\n\n\nSplits a string on colons (separator for top-level components of URNs).\n\nExamples\n\njulia> components(\"urn:cts:greekLit:tlg0012.tlg001.msA:1.1\")\n\n\n\n\n\ncomponents(u)\n\n\nSplits a URN's string representation into top-level components.\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.parts","page":"API documentation","title":"CitableBase.parts","text":"parts(componentString)\n\n\nSplits a string on periods (seprator for parts within components of URNs).\n\nExamples\n\njulia> parts(\"tlg0012.tlg001.msA\")\n\n\n\n\n\n","category":"function"},{"location":"apis/#URN-abstractions-to-implement-for-specific-types","page":"API documentation","title":"URN abstractions to implement for specific types","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"addversion\ndropversion\nurncontains\nurnsimilar","category":"page"},{"location":"apis/#CitableBase.addversion","page":"API documentation","title":"CitableBase.addversion","text":"Urn subtypes should implement addversion(urn::U, versionid)::U.  \n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.dropversion","page":"API documentation","title":"CitableBase.dropversion","text":"Urn subtypes should implement dropversion(urn::U)::U.\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.urncontains","page":"API documentation","title":"CitableBase.urncontains","text":"Urn subtypes should implement urncontains(urn1::U, urn2::U)::Bool\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.urnsimilar","page":"API documentation","title":"CitableBase.urnsimilar","text":"Urn subtypes should implement urnsimilar(urn1::U, urn2::U)::Bool.\n\n\n\n\n\n","category":"function"},{"location":"apis/#Citable-resources","page":"API documentation","title":"Citable resources","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Citable","category":"page"},{"location":"apis/#CitableBase.Citable","page":"API documentation","title":"CitableBase.Citable","text":"A citable unit of any kind is identified by a URN and has a human-readable label.\n\n\n\n\n\n","category":"type"},{"location":"apis/#Citable-abstractions-to-implement-for-specific-types","page":"API documentation","title":"Citable abstractions to implement for specific types","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"urn\nlabel\ncex","category":"page"},{"location":"apis/#CitableBase.urn","page":"API documentation","title":"CitableBase.urn","text":"Delegate urn to specific functions based on  type's citable trait value.\n\nurn(x)\n\n\n\n\n\n\nIt is an error to invoke the urn function on material that is not citable.\n\nurn(_, x)\n\n\n\n\n\n\nCitable text content should implement urn.\n\nurn(_, txt)\n\n\n\n\n\n\nCitable content should implement cex.\n\nurn(_, obj)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.label","page":"API documentation","title":"CitableBase.label","text":"Delegate label to specific functions based on  type's citable trait value.\n\n\n\n\n\nIt is an error to invoke the label function on material that is not citable.\n\nlabel(_, x)\n\n\n\n\n\n\nCitable text content should implement label.\n\nlabel(_, txt)\n\n\n\n\n\n\nCitable content should implement label.\n\nlabel(_, obj)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.cex","page":"API documentation","title":"CitableBase.cex","text":"Delegate cex to specific functions based on  type's citable trait value.\n\n\n\n\n\nIt is an error to invoke the cex function on material that is not citable.\n\ncex(, x; delimiter)\n\n\n\n\n\n\nCitable text content should implement cex.\n\ncex(, txt; delimiter)\n\n\n\n\n\n\nCitable content should implement cex.\n\ncex(, obj; delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"implementations/#Implementations","page":"Implementations","title":"Implementations","text":"","category":"section"},{"location":"implementations/#Urn","page":"Implementations","title":"Urn","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"The CITE Architecture identifies only two kinds of fundamental URN.  They are implemented in Julia by:","category":"page"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"the CtsUrn type, in CitableText.jl\nthe Cite2Urn type, in CitableObject.jl","category":"page"},{"location":"implementations/#Citable","page":"Implementations","title":"Citable","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"The variety of potential citable resources is open ended.  For a current list of implementations of Citable, see the README for the CitableBase.jl github repository.","category":"page"},{"location":"urns/#URNs:-an-example-implementation","page":"URNs","title":"URNs: an example implementation","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"The Urn abstract type models a Uniform Resource Name (URN). URNs have a string value with a specified syntax.   Here's a minimal example subtyping the Urn abstraction.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"using CitableBase\nstruct FakeUrn <: Urn\n    urn::AbstractString\nend\nfake = FakeUrn(\"urn:fake:objectclass.objectid\")\ntypeof(fake) |> supertype\n\n# output\n\nUrn","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"note: Note\nThe == function is overridden in CitableBase for all Urn types.  In order to compare two URNs for equality, you'll need to import or use CitableBase (as in the block above).","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"FakeUrn(\"urn:fake:demo1\") == FakeUrn(\"urn:fake:demo1\")\n\n# output\n\ntrue","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Subtypes of Urn should override the Base definition of print. This makes it possible to use the generic components and parts functions in CitableBase.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"import Base: print\nfunction print(io::IO, u::FakeUrn)\n    print(io, u.urn)\nend\nprint(fake)\n\n# output\n\nurn:fake:objectclass.objectid","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Top-level syntactic units are separated by colons: CitableBase refers to these units as components.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"components(fake)\n\n# output\n\n3-element Vector{SubString{String}}:\n \"urn\"\n \"fake\"\n \"objectclass.objectid\"","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"At a second syntactic level, units are separated by periods.  CitableBase refers to these as parts of a component.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"components(fake)[3] |> parts\n\n# output\n\n2-element Vector{SubString{String}}:\n \"objectclass\"\n \"objectid\"","category":"page"},{"location":"urns/#URN-manipulation","page":"URNs","title":"URN manipulation","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"Implementations of the URN interface should  dispatch the following two methods to type-specific functions:","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"dropversion(u::Urn)\naddversion(u::Urn, versionId)","category":"page"},{"location":"urns/#URN-comparison","page":"URNs","title":"URN comparison","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"Implementations of the URN interface should  dispatch the urncontains(urn1::Urn, urn2::Urn) function and the urnsimilar(urn1::Urn, urn2::Urn) function to type-specific methods.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"We illustrate the first with a simple-minded function that defines containment as any time the first part of the third component is shared.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"function urncontains(u1::FakeUrn, u2::FakeUrn)\n    components1 = components(u1)\n    components2 = components(u2)\n\n    parts1 = parts(components1[3])\n    parts2 = parts(components2[3])\n    parts1[1] == parts2[1]\nend\nurn1 = FakeUrn(\"urn:fake:group\")\nurn2 = FakeUrn(\"urn:fake:group.id2\")\nurncontains(urn1, urn2)\n\n# output\n\ntrue","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Then we define urnsimilar as true if two URNs are equal, or if either contains the other.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"function urnsimilar(u1::FakeUrn, u2::FakeUrn)\n    urncontains(u1, u2) || urncontains(u2, u1) || u1 == u2\nend\nurnsimilar(urn1, urn2)\n\n# output\n\ntrue","category":"page"},{"location":"#CitableBase","page":"Home","title":"CitableBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The CitableBase module defines two core abstractions of the CITE architecture:","category":"page"},{"location":"","page":"Home","title":"Home","text":"identifiers expressible using the syntax of the IETF URN specification\ncitable units, identified by URN, and including a human-readable label","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following pages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"illustrate how to implement a Urn and a Citable\nlist examples of implementations\ndocument public functions and types of the CitableBase module","category":"page"},{"location":"citable/#Citable-resources:-an-example-implementation","page":"Citable resources","title":"Citable resources: an example implementation","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"The CitableBase modules includes a CitableTrait using the Holy trait trick to define three categories of citable trait, CitableByCtsUrn, CitableByCite2Urn and NotCitable.  For those values of the CitableTrait, it despatches four functions: urn, label, cex and fromcex.  ","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"This page illustrates how to define a new trait value, and use it with a particular type of citable content that even has its own unique type of URN.","category":"page"},{"location":"citable/#Defining-the-citable-type","page":"Citable resources","title":"Defining the citable type","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"We'll begin by defining our own concrete implementations of the Urn type and the Citable type.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"using CitableBase\n\nstruct MyOwnUrn <: Urn\n        urn::AbstractString\nend\nstruct MyOwnCite <: Citable\n    urn::MyOwnUrn\n    label::AbstractString\nend\nu = MyOwnUrn(\"urn:fake:id.subid\")\ncitablething = MyOwnCite(u, \"Some citable resource\")\n\n# output\n\nMyOwnCite(MyOwnUrn(\"urn:fake:id.subid\"), \"Some citable resource\")","category":"page"},{"location":"citable/#Define-the-type-as-a-CitableTrait","page":"Citable resources","title":"Define the type as a CitableTrait","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"Next we'll use the Holy trait trick to make our new type work with the citable trait.  We create our new value for the citable trait as a concrete type of the CitableTrait abstract type, and identify our new citable type as having this trait value.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"import CitableBase: CitableTrait\nstruct MyUniquelyCitable <: CitableTrait end\nCitableTrait(::Type{MyOwnCite}) = MyUniquelyCitable()\n\n# output\n\nCitableTrait","category":"page"},{"location":"citable/#Implementing-the-required-functions","page":"Citable resources","title":"Implementing the required functions","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"To implement the four functions of the CitableTrait interface, all we have to do is define parameters of the proper type.","category":"page"},{"location":"citable/#Identification","page":"Citable resources","title":"Identification","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"All citable resources are identified by a Urn, which can be found with the urn function.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"import CitableBase: urn\nfunction urn(c::MyOwnCite)\n    c.urn\nend\nurn(citablething)\n\n# output\n\nMyOwnUrn(\"urn:fake:id.subid\")","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"All citable resources must have a human-readable label.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"import CitableBase: label\nfunction label(c::MyOwnCite)\n    c.label\nend\nlabel(citablething)\n\n# output\n\n\"Some citable resource\"","category":"page"},{"location":"citable/#Serialization","page":"Citable resources","title":"Serialization","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"It must be possible to serialize a citable resource following to CiteEXchange format with the cex function.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"import CitableBase: cex\nfunction cex(c::MyOwnCite, delimiter = \"|\")\n    join([c.urn.urn, c.label], delimiter)\nend\ncex(citablething)\n\n# output\n\n\"urn:fake:id.subid|Some citable resource\"","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"In the other direction, we can read CEX to instantiate a citable object.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"import CitableBase: fromcex\nfunction fromcex(s::AbstractString, MyOwnCite, delimiter = \"|\")\n    parts = split(s, delimiter)\n    urn = MyOwnUrn(parts[1])\n    label = parts[2]\n    MyOwnCite(urn, label)\nend\n\nfromcex(\"urn:fake:id.subid|Some citable resource\", MyOwnCite)\n\n# output\n\nMyOwnCite(MyOwnUrn(\"urn:fake:id.subid\"), \"Some citable resource\")","category":"page"}]
}

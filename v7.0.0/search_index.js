var documenterSearchIndex = {"docs":
[{"location":"apis/","page":"API documentation","title":"API documentation","text":"CurrentModule = CitableBase","category":"page"},{"location":"apis/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"apis/#URNs","page":"API documentation","title":"URNs","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Urn","category":"page"},{"location":"apis/#CitableBase.Urn","page":"API documentation","title":"CitableBase.Urn","text":"Unique identifiers expressible in the syntax of the IETF's URN specification.\n\n\n\n\n\n","category":"type"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Concrete functions for Urns","category":"page"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"components\nparts","category":"page"},{"location":"apis/#CitableBase.components","page":"API documentation","title":"CitableBase.components","text":"components(uString)\n\n\nSplits a string on colons (separator for top-level components of URNs).\n\nExamples\n\njulia> components(\"urn:cts:greekLit:tlg0012.tlg001.msA:1.1\")\n\n\n\n\n\ncomponents(u)\n\n\nSplits a URN's string representation into top-level components.\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.parts","page":"API documentation","title":"CitableBase.parts","text":"parts(componentString)\n\n\nSplits a string on periods (seprator for parts within components of URNs).\n\nExamples\n\njulia> parts(\"tlg0012.tlg001.msA\")\n\n\n\n\n\n","category":"function"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"URN abstractions to implement for specific types","category":"page"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"addversion\ndropversion","category":"page"},{"location":"apis/#CitableBase.addversion","page":"API documentation","title":"CitableBase.addversion","text":"Urn subtypes should implement addversion(urn::U, versionid)::U.  \n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.dropversion","page":"API documentation","title":"CitableBase.dropversion","text":"Urn subtypes should implement dropversion(urn::U)::U.\n\n\n\n\n\n","category":"function"},{"location":"apis/#Citable-resources","page":"API documentation","title":"Citable resources","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Citable","category":"page"},{"location":"apis/#CitableBase.Citable","page":"API documentation","title":"CitableBase.Citable","text":"A citable unit of any kind is identified by a URN and has a human-readable label.\n\n\n\n\n\n","category":"type"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"Functions to implement for citable resources:","category":"page"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"urn\nlabel","category":"page"},{"location":"apis/#CitableBase.urn","page":"API documentation","title":"CitableBase.urn","text":"Delegate urn to specific functions based on  type's citable trait value.\n\nurn(x)\n\n\n\n\n\n\nIt is an error to invoke the urn function on material that is not citable.\n\nurn(_, x)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.label","page":"API documentation","title":"CitableBase.label","text":"Delegate label to specific functions based on  type's citable trait value.\n\n\n\n\n\nIt is an error to invoke the label function on material that is not citable.\n\nlabel(_, x)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#URN-comparison","page":"API documentation","title":"URN comparison","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"UrnComparisonTrait\nurncontains\nurnsimilar","category":"page"},{"location":"apis/#CitableBase.UrnComparisonTrait","page":"API documentation","title":"CitableBase.UrnComparisonTrait","text":"Abstraction of values for URN manipulation.\n\n\n\n\n\n","category":"type"},{"location":"apis/#CitableBase.urncontains","page":"API documentation","title":"CitableBase.urncontains","text":"URN-comparable objects must implement urncontains.\n\nurncontains(x, y)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.urnsimilar","page":"API documentation","title":"CitableBase.urnsimilar","text":"URN-comparable objects must implement urnsimilar.\n\n\n\n\n\n","category":"function"},{"location":"apis/#CEX-serialization","page":"API documentation","title":"CEX serialization","text":"","category":"section"},{"location":"apis/","page":"API documentation","title":"API documentation","text":"CexTrait\ncex\nfromcex","category":"page"},{"location":"apis/#CitableBase.CexTrait","page":"API documentation","title":"CitableBase.CexTrait","text":"Trait for objects serializable in CEX format.\n\n\n\n\n\n","category":"type"},{"location":"apis/#CitableBase.cex","page":"API documentation","title":"CitableBase.cex","text":"Delegate cex to specific functions based on  type's citable trait value.\n\n\n\n\n\nIt is an error to invoke the cex function on material that is not CEX serializable.\n\ncex(, x; delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"apis/#CitableBase.fromcex","page":"API documentation","title":"CitableBase.fromcex","text":"Delegate fromcex to specific functions based on  type's citable trait value.\n\nfromcex(s, T; delimiter)\n\n\n\n\n\n\nIt is an error to invoke the fromcex function on material that is not CEX serializable.\n\nfromcex(, cex, T; delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"urncomparison/#Comparison-using-URN-logic","page":"URN comparison","title":"Comparison using URN logic","text":"","category":"section"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"You can compare citable objects of the same type using URN logic. ","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"In this example, we'll create a type that is not a subtype of Citable.  We import the UrnComparisonTrait trait, define the new type, and then define its trait value to be UrnComparable().","category":"page"},{"location":"urncomparison/#Comparing-individual-objects","page":"URN comparison","title":"Comparing individual objects","text":"","category":"section"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"using CitableBase\nimport CitableBase: UrnComparisonTrait\nstruct UrnThing\n    urn::AbstractString\nend\nUrnComparisonTrait(::Type{UrnThing})  = UrnComparable()\n\n# output\n\nUrnComparisonTrait","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"The UrnComparisonTrait requires us to implement three functions, urnequals, urncontains and urnsimilar.  For this example, we'll just say that any pair of UrnThings starting with the fake class contain each other and are similar.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"import CitableBase: urnequals\nfunction urnequals(u1::UrnThing, u2::UrnThing)\n   u1.urn == u2.urn\nend\n\nimport CitableBase: urncontains\nfunction urncontains(u1::UrnThing, u2::UrnThing)\n    startswith(u1.urn, \"urn:fake:\") && startswith(u2.urn, \"urn:fake:\")\nend\n\n\nimport CitableBase: urnsimilar\nfunction urnsimilar(u1::UrnThing, u2::UrnThing)\n    urncontains(u1, u2)\nend\n\n# output\n\nurnsimilar (generic function with 2 methods)","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"Let's try it out.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"thing1 = UrnThing(\"urn:fake:id.subid\")\nthing2 = UrnThing(\"urn:fake:id2\")\nthing3 = UrnThing(\"urn:notevenfake:id\")\nurnsimilar(thing1, thing2)\n\n# output\n\ntrue","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"urnsimilar(thing1, thing3)\n\n# output\n\nfalse","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"urncontains(thing1, thing2)\n\n# output\n\ntrue","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"urnequals(thing1,thing2)\n\n# output\n\nfalse","category":"page"},{"location":"urncomparison/#Making-lists-of-citable-objects-URN-comparable","page":"URN comparison","title":"Making lists of citable objects URN comparable","text":"","category":"section"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"We're not limited to implementing the UrnComparable trait for individual  objects.  The next example defines a type with a collection of citable objects.  We can make it URN comparable in exactly the same way.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"Because it is not a subtype of Citable, we again explicitly define its trait value as UrnComparable().","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"struct UrnThingList\n    arr::Vector{UrnThing}\nend\nUrnComparisonTrait(::Type{UrnThingList})  = UrnComparable()\n \n# output\n\nUrnComparisonTrait","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"We can verify that objets of our new type are now recognized as urncomparable.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"ulist = UrnThingList([thing1, thing2, thing3])\nurncomparable(ulist)\n\n# output\n\ntrue","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"Now we'll our required functions not to return a boolean value, but to filter the collection for matching content using URN logic. The functions will return a (possibly empty) list of UrnThings.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"note: Note\nThis is the same semantics as in the CitableLibary package where  the UrnComparisonTrait is used to filter citable collections.","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"function urnequals(urnlist::UrnThingList, uthing::UrnThing)\n    filter(u -> urnequals(uthing, u), urnlist.arr)\nend\n\n\nfunction urncontains(urnlist::UrnThingList, uthing::UrnThing)\n    filter(u -> urncontains(uthing, u), urnlist.arr)\nend\n\nfunction urnsimilar(urnlist::UrnThingList, uthing::UrnThing)\n    urncontains(urnlist, uthing)\nend\n\n# output\n\nurnsimilar (generic function with 3 methods)","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"\nurnsimilar(ulist, thing1)\n\n# output\n\n2-element Vector{UrnThing}:\n UrnThing(\"urn:fake:id.subid\")\n UrnThing(\"urn:fake:id2\")","category":"page"},{"location":"urncomparison/","page":"URN comparison","title":"URN comparison","text":"urnequals(ulist, thing1)\n\n# output\n\n1-element Vector{UrnThing}:\n UrnThing(\"urn:fake:id.subid\")","category":"page"},{"location":"implementations/#Implementations","page":"Implementations","title":"Implementations","text":"","category":"section"},{"location":"implementations/#Urn","page":"Implementations","title":"Urn","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"The CITE Architecture identifies only two kinds of fundamental URN.  They are implemented in Julia by:","category":"page"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"the CtsUrn type, in CitableText.jl\nthe Cite2Urn type, in CitableObject.jl","category":"page"},{"location":"implementations/#Citable","page":"Implementations","title":"Citable","text":"","category":"section"},{"location":"implementations/","page":"Implementations","title":"Implementations","text":"The variety of potential citable resources is open ended.  For a current list of implementations of Citable, see the README for the CitableBase.jl github repository.","category":"page"},{"location":"citabletrait/#Implement-CitableTrait","page":"Citable trait","title":"Implement CitableTrait","text":"","category":"section"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"The CitableTrait requires defining two functions, urn and label. As always, we first import the required method from CitableBase, then implement a function with a parameter of our new type.","category":"page"},{"location":"citabletrait/#Identification","page":"Citable trait","title":"Identification","text":"","category":"section"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"Citable resources are identified by a Urn, which can be found with the urn function.","category":"page"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"using CitableBase\n\nstruct MyOwnUrn <: Urn\n        urn::AbstractString\nend\nstruct MyOwnCite <: Citable\n    urn::MyOwnUrn\n    label::AbstractString\nend\nu = MyOwnUrn(\"urn:fake:id.subid\")\ncitablething = MyOwnCite(u, \"Some citable resource\")\n","category":"page"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"import CitableBase: urn\nfunction urn(c::MyOwnCite)\n    c.urn\nend\nurn(citablething)\n\n# output\n\nMyOwnUrn(\"urn:fake:id.subid\")","category":"page"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"Citable resources have a human-readable label.","category":"page"},{"location":"citabletrait/","page":"Citable trait","title":"Citable trait","text":"import CitableBase: label\nfunction label(c::MyOwnCite)\n    c.label\nend\nlabel(citablething)\n\n# output\n\n\"Some citable resource\"","category":"page"},{"location":"cex/#Serialization-to-and-from-CEX-format","page":"CEX serialization","title":"Serialization to and from CEX format","text":"","category":"section"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"The CexTrait requires that content be serializable from strings in CEX format, and round-tripped from CEX source to instantiate the original object.","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"We define the CexTrait for the new type we created in the previous pages to be CexSerializable().","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"using CitableBase\n\nstruct MyOwnUrn <: Urn\n        urn::AbstractString\nend\nstruct MyOwnCite <: Citable\n    urn::MyOwnUrn\n    label::AbstractString\nend","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"import CitableBase: CexTrait\nCexTrait(::Type{MyOwnCite}) = CexSerializable() ","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"Now we can import and define the cex and fromcex functions.","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"import CitableBase: cex\nfunction cex(c::MyOwnCite; delimiter = \"|\")\n    join([c.urn.urn, c.label], delimiter)\nend\n\nu = MyOwnUrn(\"urn:fake:id.subid\")\ncitablething = MyOwnCite(u, \"Some citable resource\")\ncex(citablething)","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"In the other direction, we define fromcex to instantiate a citable object from CEX source.","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"import CitableBase: fromcex\n\nfunction fromcex(s::AbstractString, MyOwnCite; delimiter = \"|\")\n    parts = split(s, delimiter)\n    urn = MyOwnUrn(parts[1])\n    label = parts[2]\n    MyOwnCite(urn, label)\nend","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"s = \"urn:fake:id.subid|Some citable resource\"\nfromcex(s, MyOwnCite)\n","category":"page"},{"location":"cex/","page":"CEX serialization","title":"CEX serialization","text":"???","category":"page"},{"location":"urns/#URNs:-an-example-implementation","page":"URNs","title":"URNs: an example implementation","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"The Urn abstract type models a Uniform Resource Name (URN). URNs have a string value with a specified syntax.   Here's a minimal example subtyping the Urn abstraction.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"using CitableBase\nstruct FakeUrn <: Urn\n    urn::AbstractString\nend\nfake = FakeUrn(\"urn:fake:objectclass.objectid\")\ntypeof(fake) |> supertype\n\n# output\n\nUrn","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Because it is a subtype of Urn, our new type is recognized as comparable on URN logic.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"urncomparable(fake)\n\n# output\n\ntrue","category":"page"},{"location":"urns/#URN-comparison","page":"URNs","title":"URN comparison","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"We need to implement three functions for our new URN type: urnequals, urncontains and urnsimilar.  ","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"note: Note\nIn addition to URN values, these three functions can be implemented for other types of objects.  See the following pages for an example of how they are applied to citable objects (subtypes of Citable);  for their use with collections of citable content, see the documentation for the CitableLibary package.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"The == function of Julia Base is overridden in CitableBase for all subtypes of Urn.  This in turn serves as an implementation of urnequals for subtypes of Urn.  ","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"warning: Warning\nNote that in order to compare two URNs for equality, you'll need to import or use CitableBase (as in the block above).","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"FakeUrn(\"urn:fake:demo1\") == FakeUrn(\"urn:fake:demo1\")\n\n# output\n\ntrue","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"To implement urncontains and urnsimilar, first import the method from CitableBase; then, implement the function with parameters for your new type.  ","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"For this artificial example, we'll define one URN as \"containing\" another if they both belong to the URN type \"urn:fake:\".  We'll use a good generic definition for URN similarity: two URNs are similar if one contains the other or if both are equal.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"import CitableBase: urncontains\nfunction urncontains(u1::FakeUrn, u2::FakeUrn)\n    startswith(u1.urn, \"urn:fake:\") && startswith(u2.urn, \"urn:fake:\")\nend\n\n\nimport CitableBase: urnsimilar\nfunction urnsimilar(u1::FakeUrn, u2::FakeUrn)\n    urncontains(u1, u2) || urnequals(u1, u2)\nend\n\nurnsimilar(FakeUrn(\"urn:fake:demo1\"),  FakeUrn(\"urn:fake:demo2\"))\n\n# output\n\ntrue","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"\nurncontains(FakeUrn(\"urn:fake:demo1\"),  FakeUrn(\"urn:fake:demo2\"))\n\n# output\n\ntrue","category":"page"},{"location":"urns/#URN-manipulation","page":"URNs","title":"URN manipulation","text":"","category":"section"},{"location":"urns/","page":"URNs","title":"URNs","text":"Subtypes of Urn should also override the Base definition of print. This makes it possible to use the generic components and parts functions in CitableBase.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"import Base: print\nfunction print(io::IO, u::FakeUrn)\n    print(io, u.urn)\nend\nprint(fake)\n\n# output\n\nurn:fake:objectclass.objectid","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Top-level syntactic units are separated by colons: CitableBase refers to these units as components.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"components(fake)\n\n# output\n\n3-element Vector{SubString{String}}:\n \"urn\"\n \"fake\"\n \"objectclass.objectid\"","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"At a second syntactic level, units are separated by periods.  CitableBase refers to these as parts of a component.","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"components(fake)[3] |> parts\n\n# output\n\n2-element Vector{SubString{String}}:\n \"objectclass\"\n \"objectid\"","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"Implementations of the URN interface should  dispatch the following two methods to type-specific functions:","category":"page"},{"location":"urns/","page":"URNs","title":"URNs","text":"dropversion(u::Urn)\naddversion(u::Urn, versionId)","category":"page"},{"location":"#CitableBase","page":"Home","title":"CitableBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The CitableBase module defines two core abstractions of the CITE architecture:","category":"page"},{"location":"","page":"Home","title":"Home","text":"identifiers expressible using the syntax of the IETF URN specification (the Urn abstract type)\ncitable entities, identified by URN (the Citable abstract type)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Three Julia traits define the essential semantics of these types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"the CitableTrait requires that citable entities (subtypes of Citable) be identified by a URN and have a human-readable label\nthe UrnComparisonTrait requires that identifiers (subtypes of Urn) and citable entities be comparable based on URN equality, containment and  similarity\nthe CexSerializable treat requires that citable entities be losslessly serialized to plain-text representation in CEX format and instantiated from the same plain-text representation","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following pages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"illustrate how to implement the Urn type and its UrnComparisonTrait, the three traits of the Citable type, namely, the CitableTrait, the UrnComparisonTrait and the CexTrait\nlist examples of implementations\ndocument public functions and types of the CitableBase module","category":"page"},{"location":"citable/#Citable-entities:-an-example-implementation","page":"Citable resources","title":"Citable entities: an example implementation","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"CitableBase defines three traits that all citable entities must implement:  ","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"the CitableTrait.  Citable objects are identified by URN, and have a human readable label.\nthe UrnComparisonTrait.  Citable objects can be compared with other citable objects of the same type using URN logic.\nthe CexTrait.  Citable objects can be round tripped to/from serialization to text strings in CEX format.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"The next three pages walk through implementing these three traits for a custom type of citable object.","category":"page"},{"location":"citable/#Defining-the-citable-type","page":"Citable resources","title":"Defining the citable type","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"We'll begin by defining a custom type of citable object, citable by its own custom type of URN.  Note that we make the types MyOwnUrn and MyOwnCite subtypes of the abstract Urn and Citable types, respectively.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"using CitableBase\n\nstruct MyOwnUrn <: Urn\n        urn::AbstractString\nend\nstruct MyOwnCite <: Citable\n    urn::MyOwnUrn\n    label::AbstractString\nend\nu = MyOwnUrn(\"urn:fake:id.subid\")\ncitablething = MyOwnCite(u, \"Some citable resource\")\n\n# output\n\nMyOwnCite(MyOwnUrn(\"urn:fake:id.subid\"), \"Some citable resource\")","category":"page"},{"location":"citable/#Recognizing-the-three-core-traits-of-the-CITE-architecture","page":"Citable resources","title":"Recognizing the three core traits of the CITE architecture","text":"","category":"section"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"Because MyOwnUrn is a subtype of Urn, MyOwnUrn objects are assumed to implement the UrnComparison trait.","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"urncomparable(u)\n\n# output\n\ntrue","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"Because MyOwnCite is a subtype of Citable, objects of that type are now recognizable as citable objects implementing all three core traits","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"citable(citablething)\n\n# output\n\ntrue","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"urncomparable(citablething)\n\n# output\n\ntrue","category":"page"},{"location":"citable/","page":"Citable resources","title":"Citable resources","text":"cexserializable(citablething)\n\n# output\n\ntrue","category":"page"}]
}
